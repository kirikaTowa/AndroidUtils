plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def cfg = rootProject.ext.android // 工程配置
def libs = rootProject.ext.dependencies // 库依赖

android {
    //改包名的时候 记得命名空间不要改
    namespace 'com.kakusummer.androidutils'
    compileSdk cfg.compileSdk

    defaultConfig {
        //包名
        applicationId "com.hzsyun.zytqyb100"
        minSdk cfg.minSdk
        targetSdk cfg.targetSdk
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
//        不配置debug变体
//        debug {
//            buildConfigField "String", "BASE_URL", "\"http://xx.xx.xx.xx:xxxx/\""
//        }
        // 移除 debug 构建类型

        release {
            buildConfigField "String", "BASE_URL", "\"http://xx.xx.xx.xx:xxxx/\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    //1、 构建变体-限定维度名
    flavorDimensions 'dova'

    //2. 构建变体-配置对应打包key
    signingConfigs {
//        channel1 {
//            keyAlias 'xxx'
//            keyPassword 'xxx'
//            storeFile file('目录')
//            storePassword 'xxx'
//        }
//
//        channel2 {
//            keyAlias 'exampledemoflavor'
//            keyPassword '123456'
//            storeFile file('ExampleDemoFlavor.jks')
//            storePassword '123456'
//        }
    }
    //3. 构建变体-支持写入buildConfigField
    buildFeatures {
        buildConfig = true
    }

    def myAppName = new LinkedHashSet()
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")
    myAppName.add("")



    variantFilter { variant ->
        if (variant.buildType.name == 'debug') {
            variant.setIgnore(true)
        }
    }

    //4. 构建变体-配置productFlavors
    productFlavors {
        myAppName.eachWithIndex { name, index ->
            "apk${index + 1}" {
                applicationId "com.hzsyun.zytqyb100"
                resValue "string", "app_name", "${name}"
                buildConfigField "String", "APP_NAME", "\"${name}\""
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName

            def appName = getBuildConfigFieldValue(variant, "APP_NAME").replaceAll('\"', '')

            if (variant.buildType.name == "release") {
                fileName = "${appName}_release.apk"
                //fileName = "${applicationId}_${variant.name}_${defaultConfig.versionName}_release.apk"
            } else {
                fileName = "${appName}${applicationId}_${variant.name}_${defaultConfig.versionName}_debug.apk"
            }
            outputFileName = fileName
        }
    }


    //5. 构建变体-配置sourceSets
    sourceSets {
//        channel1 {
//            res.srcDirs = ['src/main/res']
//            //java.srcDirs = ['src/main/java']
//        }
//        channel2 {
//            res.srcDirs = ['src/channel2/res']
//            //java.srcDirs = ['src/channel2/java']
//        }
//        channel3 {
//            res.srcDirs = ['src/channel1/res']
//            //java.srcDirs = ['src/channel2/java']
//        }
//        channel4 {
//            res.srcDirs = ['src/channel1/res']
//            //java.srcDirs = ['src/channel2/java']
//        }
    }


    compileOptions {
        sourceCompatibility cfg.Compatibility
        targetCompatibility cfg.Compatibility
    }
    kotlinOptions {
        jvmTarget = cfg.jvmTarget
    }

    dataBinding {
        enabled true
    }



}

static String getBuildConfigFieldValue(def variant, def fiedName) {
    def properties = variant.productFlavors[0].properties
    def name = properties.get("name")
    if (name != variant.flavorName) {
        return ""
    }
    def configs = properties.get("buildConfigFields")
    def address = null
    for (Map.Entry<String, Object> item : configs) {
        def key = item.key
        if (key == fiedName) {
            address = item.value
        }
    }
    if (address == null) return ""
    def field = address.getClass().getDeclaredField("value")
    field.setAccessible(true)
    return field.get(address)
}

dependencies {
    implementation project(path: ':utils')
    implementation project(path: ':bases')

    implementation libs["core-ktx"]
    implementation libs["appcompat"]
    implementation libs["material"]
    implementation libs["constraintlayout"]

    testImplementation libs["junit"]
    androidTestImplementation libs["junit_ext"]
    androidTestImplementation libs["espresso_core"]

    //lifecycle
    implementation libs["lifecycle-viewmodel-ktx"]
    implementation libs["lifecycle-livedata-ktx"]
    //viewModel
    implementation libs["activity-ktx"]
    implementation libs["fragment-ktx"]

    //沉浸式状态栏
    implementation libs["immersionbar"]
    // kotlin扩展（可选）
    implementation libs["immersionbar-ktx"]
    // fragment快速实现（可选）已废弃
    implementation libs["immersionbar-components"]
}