plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def cfg = rootProject.ext.android // 工程配置
def libs = rootProject.ext.dependencies // 库依赖

android {
    namespace 'com.yuantu.bluetools'
    compileSdk cfg.compileSdk

    defaultConfig {
        applicationId "com.yuantu.bluetools"
        minSdk cfg.minSdk
        targetSdk cfg.targetSdk
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            buildConfigField "String", "BASE_URL", "\"http://xx.xx.xx.xx:xxxx/\""
        }
        release {
            buildConfigField "String", "BASE_URL", "\"http://xx.xx.xx.xx:xxxx/\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }



    //3. 构建变体-支持写入buildConfigField
    buildFeatures {
        buildConfig = true
    }


    compileOptions {
        sourceCompatibility cfg.Compatibility
        targetCompatibility cfg.Compatibility
    }
    kotlinOptions {
        jvmTarget = cfg.jvmTarget
    }

    dataBinding {
        enabled true
    }
}

dependencies {
    implementation project(path: ':utils')
    implementation project(path: ':bases')

    implementation libs["core-ktx"]
    implementation libs["appcompat"]
    implementation libs["material"]
    implementation libs["constraintlayout"]

    testImplementation libs["junit"]
    androidTestImplementation libs["junit_ext"]
    androidTestImplementation libs["espresso_core"]

    //lifecycle
    implementation libs["lifecycle-viewmodel-ktx"]
    implementation libs["lifecycle-livedata-ktx"]
    //viewModel
    implementation libs["activity-ktx"]
    implementation libs["fragment-ktx"]

    //沉浸式状态栏
    implementation libs["immersionbar"]
    // kotlin扩展（可选）
    implementation libs["immersionbar-ktx"]
    // fragment快速实现（可选）已废弃
    implementation libs["immersionbar-components"]
}